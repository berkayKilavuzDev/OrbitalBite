from django.shortcuts import get_object_or_404
from django.http import JsonResponse
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAdminUser
from .models import MenuItem, Option, MenuCategory
from .serializers import MenuItemSerializer, MenuCategorySerializer, OptionSerializer

# âœ… MenÃ¼ listesini getirir (TÃ¼m kullanÄ±cÄ±lara aÃ§Ä±k)
@api_view(['GET'])
def get_menu(request):
    items = MenuItem.objects.filter(is_available=True)
    serializer = MenuItemSerializer(items, many=True)
    return Response({'status': 'success', 'menu': serializer.data})

# âœ… MenÃ¼deki kategorileri getir (Frontend iÃ§in filtreleme)
@api_view(['GET'])
def get_categories(request):
    categories = MenuCategory.objects.all()
    serializer = MenuCategorySerializer(categories, many=True)
    return Response({'status': 'success', 'categories': serializer.data})

# âœ… Belirtilen menÃ¼ Ã¶ÄŸesinin opsiyonlarÄ±nÄ± getir
@api_view(['GET'])
def get_options(request, item_id):
    item = get_object_or_404(MenuItem, id=item_id)

    # ğŸ”¥ Hem kategoriye ait olan hem de sadece bu Ã¼rÃ¼ne Ã¶zel olan seÃ§enekleri dÃ¶ndÃ¼r
    category_options = item.category.options.all()  # âœ… `category` iÃ§inden `options` Ã§ekiyoruz
    item_options = item.item_options.all()  # âœ… DoÄŸrudan `MenuItem` Ã¼zerindeki opsiyonlarÄ± Ã§ekiyoruz

    category_serializer = OptionSerializer(category_options, many=True)
    item_serializer = OptionSerializer(item_options, many=True)

    return Response({
        'status': 'success',
        'category_options': category_serializer.data,
        'item_options': item_serializer.data
    })

    
# âœ… MenÃ¼ye yeni Ã¼rÃ¼n ekleme (Sadece admin yetkisi olan kullanÄ±cÄ±lar)
@api_view(['POST'])
@permission_classes([IsAdminUser])
def add_menu_item(request):
    serializer = MenuItemSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response({'status': 'success', 'message': 'Menu item added!', 'item': serializer.data})
    return Response({'status': 'error', 'message': serializer.errors}, status=400)

# âœ… MenÃ¼ Ã¶ÄŸesini dÃ¼zenleme (Sadece admin yetkisi olanlar)
@api_view(['PUT'])
@permission_classes([IsAdminUser])
def edit_menu_item(request, item_id):
    menu_item = get_object_or_404(MenuItem, id=item_id)
    serializer = MenuItemSerializer(menu_item, data=request.data, partial=True)

    if serializer.is_valid():
        serializer.save()
        return Response({'status': 'success', 'message': 'Menu item updated!', 'item': serializer.data})
    return Response({'status': 'error', 'message': serializer.errors}, status=400)

# âœ… MenÃ¼den Ã¼rÃ¼n silme (Sadece admin)
@api_view(['DELETE'])
@permission_classes([IsAdminUser])
def delete_menu_item(request, item_id):
    menu_item = get_object_or_404(MenuItem, id=item_id)
    menu_item.delete()
    return Response({'status': 'success', 'message': 'Menu item deleted!'})

# âœ… Side SeÃ§eneklerini getir (Yan Ã¼rÃ¼nler, iÃ§ecekler vs.)
@api_view(['GET'])
def get_side_selections(request, item_id):
    item = get_object_or_404(MenuItem, id=item_id)

    # ğŸ”¥ MenÃ¼ Ã¶ÄŸesine baÄŸlÄ± side selectionlarÄ± getir
    side_selections = SideSelection.objects.filter(parent_menu_item=item)
    serializer = SideSelectionSerializer(side_selections, many=True)

    return Response({'status': 'success', 'side_selections': serializer.data})