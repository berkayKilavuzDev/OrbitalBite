{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Kullanıcı bilgilerini API'den al (async action)\nexport const fetchUser = createAsyncThunk('user/fetchUser', async () => {\n  const response = await fetch('/api/user/');\n  return response.json();\n});\n\n// Kullanıcı giriş yapma (login)\nexport const loginUser = createAsyncThunk('user/loginUser', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/api/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || \"Login failed.\");\n    }\n    return data; // Backend'den gelen kullanıcı verisi\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Kullanıcı çıkış yapma (logout)\nexport const logoutUser = createAsyncThunk('user/logoutUser', async () => {\n  await fetch('/api/logout/', {\n    method: 'POST'\n  });\n  return null; // Redux state'ini sıfırlamak için null dönüyoruz\n});\n\n// Kullanıcı kaydı (signup)\nexport const signupUser = createAsyncThunk('user/signupUser', async (userData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/api/signup/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || \"Signup failed.\");\n    }\n    return data; // Backend yeni kullanıcıyı döndürmeli\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Kullanıcı bilgilerini güncelleme (Update User Details)\nexport const updateUserDetails = createAsyncThunk('user/updateDetails', async (updatedData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/api/update-user/', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || \"Update failed.\");\n    }\n    return data; // Güncellenmiş kullanıcı bilgileri dönmeli\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Kullanıcı şifre değiştirme (Change Password)\nexport const changePassword = createAsyncThunk('user/changePassword', async (passwordData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/api/change-password/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(passwordData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || \"Password change failed.\");\n    }\n    return data; // Backend başarılı mesaj döndürmeli\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n    status: 'idle',\n    // idle | loading | succeeded | failed\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchUser.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload;\n    }).addCase(fetchUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(loginUser.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload; // Kullanıcı bilgilerini güncelle\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload; // Hata mesajını kaydet\n    }).addCase(logoutUser.fulfilled, state => {\n      state.user = null; // Kullanıcı çıkış yaptı, state sıfırlanıyor\n      state.status = 'idle';\n    }).addCase(signupUser.pending, state => {\n      state.status = 'loading';\n    }).addCase(signupUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload.user; // Backend yeni kullanıcıyı döndürmeli\n    }).addCase(signupUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(updateUserDetails.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateUserDetails.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = {\n        ...state.user,\n        ...action.payload\n      }; // Güncellenen bilgileri state'e ekle\n    }).addCase(updateUserDetails.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(changePassword.pending, state => {\n      state.status = 'loading';\n    }).addCase(changePassword.fulfilled, state => {\n      state.status = 'succeeded';\n    }).addCase(changePassword.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchUser","response","fetch","json","loginUser","credentials","rejectWithValue","method","headers","body","JSON","stringify","data","ok","Error","message","error","logoutUser","signupUser","userData","updateUserDetails","updatedData","changePassword","passwordData","userSlice","name","initialState","user","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/nazli/Desktop/Business/orbital/frontend/src/redux/userSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Kullanıcı bilgilerini API'den al (async action)\r\nexport const fetchUser = createAsyncThunk('user/fetchUser', async () => {\r\n  const response = await fetch('/api/user/');\r\n  return response.json();\r\n});\r\n\r\n// Kullanıcı giriş yapma (login)\r\nexport const loginUser = createAsyncThunk('user/loginUser', async (credentials, { rejectWithValue }) => {\r\n  try {\r\n    const response = await fetch('/api/login/', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Login failed.\");\r\n    }\r\n    return data; // Backend'den gelen kullanıcı verisi\r\n  } catch (error) {\r\n    return rejectWithValue(error.message);\r\n  }\r\n});\r\n\r\n// Kullanıcı çıkış yapma (logout)\r\nexport const logoutUser = createAsyncThunk('user/logoutUser', async () => {\r\n  await fetch('/api/logout/', { method: 'POST' });\r\n  return null; // Redux state'ini sıfırlamak için null dönüyoruz\r\n});\r\n\r\n// Kullanıcı kaydı (signup)\r\nexport const signupUser = createAsyncThunk('user/signupUser', async (userData, { rejectWithValue }) => {\r\n  try {\r\n    const response = await fetch('/api/signup/', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Signup failed.\");\r\n    }\r\n    return data; // Backend yeni kullanıcıyı döndürmeli\r\n  } catch (error) {\r\n    return rejectWithValue(error.message);\r\n  }\r\n});\r\n\r\n// Kullanıcı bilgilerini güncelleme (Update User Details)\r\nexport const updateUserDetails = createAsyncThunk('user/updateDetails', async (updatedData, { rejectWithValue }) => {\r\n  try {\r\n    const response = await fetch('/api/update-user/', {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Update failed.\");\r\n    }\r\n    return data; // Güncellenmiş kullanıcı bilgileri dönmeli\r\n  } catch (error) {\r\n    return rejectWithValue(error.message);\r\n  }\r\n});\r\n\r\n// Kullanıcı şifre değiştirme (Change Password)\r\nexport const changePassword = createAsyncThunk('user/changePassword', async (passwordData, { rejectWithValue }) => {\r\n  try {\r\n    const response = await fetch('/api/change-password/', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(passwordData),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Password change failed.\");\r\n    }\r\n    return data; // Backend başarılı mesaj döndürmeli\r\n  } catch (error) {\r\n    return rejectWithValue(error.message);\r\n  }\r\n});\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n    status: 'idle', // idle | loading | succeeded | failed\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUser.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(fetchUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.status = 'loading';\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = action.payload; // Kullanıcı bilgilerini güncelle\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload; // Hata mesajını kaydet\r\n      })\r\n      .addCase(logoutUser.fulfilled, (state) => {\r\n        state.user = null; // Kullanıcı çıkış yaptı, state sıfırlanıyor\r\n        state.status = 'idle';\r\n      })\r\n      .addCase(signupUser.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(signupUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = action.payload.user; // Backend yeni kullanıcıyı döndürmeli\r\n      })\r\n      .addCase(signupUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(updateUserDetails.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(updateUserDetails.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = { ...state.user, ...action.payload }; // Güncellenen bilgileri state'e ekle\r\n      })\r\n      .addCase(updateUserDetails.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(changePassword.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(changePassword.fulfilled, (state) => {\r\n        state.status = 'succeeded';\r\n      })\r\n      .addCase(changePassword.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default userSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}